{
    "sourceFile": "backend/app.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1754856206435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754857379454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,21 +10,19 @@\n ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n \n app = Flask(__name__)\n-CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n \n app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n \n-# Ensure uploads folder exists\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-\n def allowed_file(filename):\n     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n \n-\n+# --- Upload video ---\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n         return jsonify({'error': 'No video file found in request'}), 400\n@@ -46,9 +44,9 @@\n         }), 201\n \n     return jsonify({'error': 'Invalid file type'}), 400\n \n-\n+# --- List videos ---\n @app.route('/videos', methods=['GET'])\n def list_videos():\n     files = sorted(\n         os.listdir(app.config['UPLOAD_FOLDER']),\n@@ -56,14 +54,14 @@\n         reverse=True\n     )\n     return jsonify(files)\n \n-\n+# --- Serve uploaded video ---\n @app.route('/uploads/<path:filename>', methods=['GET'])\n def serve_video(filename):\n     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n-\n+# --- Get video info ---\n @app.route('/video-info/<filename>', methods=['GET'])\n def video_info(filename):\n     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n     if not os.path.exists(path):\n@@ -75,9 +73,9 @@\n         'size_kb': round(stat.st_size / 1024, 2),\n         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n     })\n \n-\n+# --- Delete video ---\n @app.route('/delete-video/<filename>', methods=['DELETE'])\n def delete_video(filename):\n     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n     if not os.path.exists(path):\n@@ -85,7 +83,128 @@\n \n     os.remove(path)\n     return jsonify({'message': f'{filename} deleted successfully'})\n \n+# --- Dashboard API ---\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n \n+    total_videos = len(files)\n+    total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+    total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+    recent_activity = []\n+    for f in files[:5]:\n+        stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+        recent_activity.append({\n+            \"type\": \"upload\",\n+            \"title\": f,\n+            \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+            \"url\": f\"/uploads/{f}\"\n+        })\n+\n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": recent_activity\n+    })\n+\n if __name__ == '__main__':\n     app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+# from flask import Flask, request, jsonify, send_from_directory\n+# from flask_cors import CORS\n+# import os\n+# from werkzeug.utils import secure_filename\n+# from datetime import datetime\n+# import uuid\n+\n+# # === CONFIG ===\n+# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# app = Flask(__name__)\n+# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+\n+# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# # Ensure uploads folder exists\n+# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+\n+# def allowed_file(filename):\n+#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+\n+# @app.route('/upload', methods=['POST'])\n+# def upload_video():\n+#     if 'video' not in request.files:\n+#         return jsonify({'error': 'No video file found in request'}), 400\n+\n+#     file = request.files['video']\n+#     if file.filename == '':\n+#         return jsonify({'error': 'No selected file'}), 400\n+\n+#     if file and allowed_file(file.filename):\n+#         original_filename = secure_filename(file.filename)\n+#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+#         file.save(save_path)\n+\n+#         return jsonify({\n+#             'message': 'File uploaded successfully',\n+#             'filename': unique_filename,\n+#             'url': f\"/uploads/{unique_filename}\"\n+#         }), 201\n+\n+#     return jsonify({'error': 'Invalid file type'}), 400\n+\n+\n+# @app.route('/videos', methods=['GET'])\n+# def list_videos():\n+#     files = sorted(\n+#         os.listdir(app.config['UPLOAD_FOLDER']),\n+#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+#         reverse=True\n+#     )\n+#     return jsonify(files)\n+\n+\n+# @app.route('/uploads/<path:filename>', methods=['GET'])\n+# def serve_video(filename):\n+#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+\n+# @app.route('/video-info/<filename>', methods=['GET'])\n+# def video_info(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     stat = os.stat(path)\n+#     return jsonify({\n+#         'name': filename,\n+#         'size_kb': round(stat.st_size / 1024, 2),\n+#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+#     })\n+\n+\n+# @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# def delete_video(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     os.remove(path)\n+#     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+\n+# if __name__ == '__main__':\n+#     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754944162425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,292 @@\n+from flask import Flask, request, jsonify, send_from_directory, render_template\n+from flask_cors import CORS\n+import os\n+from werkzeug.utils import secure_filename\n+from datetime import datetime\n+import uuid\n+\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+app = Flask(__name__, template_folder='templates', static_folder='static')\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# === Frontend route ===\n+@app.route('/')\n+def index():\n+    return render_template('index.html')\n+\n+# --- Upload video ---\n+@app.route('/upload', methods=['POST'])\n+def upload_video():\n+    if 'video' not in request.files:\n+        return jsonify({'error': 'No video file found in request'}), 400\n+\n+    file = request.files['video']\n+    if file.filename == '':\n+        return jsonify({'error': 'No selected file'}), 400\n+\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n+\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n+\n+    return jsonify({'error': 'Invalid file type'}), 400\n+\n+# --- List videos ---\n+@app.route('/videos', methods=['GET'])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n+\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n+def serve_video(filename):\n+    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n+\n+if __name__ == '__main__':\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+\n+\n+# from flask import Flask, request, jsonify, send_from_directory\n+# from flask_cors import CORS\n+# import os\n+# from werkzeug.utils import secure_filename\n+# from datetime import datetime\n+# import uuid\n+\n+# # === CONFIG ===\n+# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# app = Flask(__name__)\n+# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+# def allowed_file(filename):\n+#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# # --- Upload video ---\n+# @app.route('/upload', methods=['POST'])\n+# def upload_video():\n+#     if 'video' not in request.files:\n+#         return jsonify({'error': 'No video file found in request'}), 400\n+\n+#     file = request.files['video']\n+#     if file.filename == '':\n+#         return jsonify({'error': 'No selected file'}), 400\n+\n+#     if file and allowed_file(file.filename):\n+#         original_filename = secure_filename(file.filename)\n+#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+#         file.save(save_path)\n+\n+#         return jsonify({\n+#             'message': 'File uploaded successfully',\n+#             'filename': unique_filename,\n+#             'url': f\"/uploads/{unique_filename}\"\n+#         }), 201\n+\n+#     return jsonify({'error': 'Invalid file type'}), 400\n+\n+# # --- List videos ---\n+# @app.route('/videos', methods=['GET'])\n+# def list_videos():\n+#     files = sorted(\n+#         os.listdir(app.config['UPLOAD_FOLDER']),\n+#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+#         reverse=True\n+#     )\n+#     return jsonify(files)\n+\n+# # --- Serve uploaded video ---\n+# @app.route('/uploads/<path:filename>', methods=['GET'])\n+# def serve_video(filename):\n+#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# # --- Get video info ---\n+# @app.route('/video-info/<filename>', methods=['GET'])\n+# def video_info(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     stat = os.stat(path)\n+#     return jsonify({\n+#         'name': filename,\n+#         'size_kb': round(stat.st_size / 1024, 2),\n+#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+#     })\n+\n+# # --- Delete video ---\n+# @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# def delete_video(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     os.remove(path)\n+#     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+# # --- Dashboard API ---\n+# @app.route('/dashboard', methods=['GET'])\n+# def dashboard():\n+#     files = sorted(\n+#         os.listdir(app.config['UPLOAD_FOLDER']),\n+#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+#         reverse=True\n+#     )\n+\n+#     total_videos = len(files)\n+#     total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+#     total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+#     recent_activity = []\n+#     for f in files[:5]:\n+#         stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+#         recent_activity.append({\n+#             \"type\": \"upload\",\n+#             \"title\": f,\n+#             \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+#             \"url\": f\"/uploads/{f}\"\n+#         })\n+\n+#     return jsonify({\n+#         \"totalVideos\": total_videos,\n+#         \"totalViews\": total_views,\n+#         \"totalLikes\": total_likes,\n+#         \"recentActivity\": recent_activity\n+#     })\n+\n+# if __name__ == '__main__':\n+#     app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+# # from flask import Flask, request, jsonify, send_from_directory\n+# # from flask_cors import CORS\n+# # import os\n+# # from werkzeug.utils import secure_filename\n+# # from datetime import datetime\n+# # import uuid\n+\n+# # # === CONFIG ===\n+# # UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# # app = Flask(__name__)\n+# # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+\n+# # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# # # Ensure uploads folder exists\n+# # os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+\n+# # def allowed_file(filename):\n+# #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+\n+# # @app.route('/upload', methods=['POST'])\n+# # def upload_video():\n+# #     if 'video' not in request.files:\n+# #         return jsonify({'error': 'No video file found in request'}), 400\n+\n+# #     file = request.files['video']\n+# #     if file.filename == '':\n+# #         return jsonify({'error': 'No selected file'}), 400\n+\n+# #     if file and allowed_file(file.filename):\n+# #         original_filename = secure_filename(file.filename)\n+# #         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+# #         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+# #         file.save(save_path)\n+\n+# #         return jsonify({\n+# #             'message': 'File uploaded successfully',\n+# #             'filename': unique_filename,\n+# #             'url': f\"/uploads/{unique_filename}\"\n+# #         }), 201\n+\n+# #     return jsonify({'error': 'Invalid file type'}), 400\n+\n+\n+# # @app.route('/videos', methods=['GET'])\n+# # def list_videos():\n+# #     files = sorted(\n+# #         os.listdir(app.config['UPLOAD_FOLDER']),\n+# #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+# #         reverse=True\n+# #     )\n+# #     return jsonify(files)\n+\n+\n+# # @app.route('/uploads/<path:filename>', methods=['GET'])\n+# # def serve_video(filename):\n+# #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+\n+# # @app.route('/video-info/<filename>', methods=['GET'])\n+# # def video_info(filename):\n+# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+# #     if not os.path.exists(path):\n+# #         return jsonify({'error': 'File not found'}), 404\n+\n+# #     stat = os.stat(path)\n+# #     return jsonify({\n+# #         'name': filename,\n+# #         'size_kb': round(stat.st_size / 1024, 2),\n+# #         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+# #     })\n+\n+\n+# # @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# # def delete_video(filename):\n+# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+# #     if not os.path.exists(path):\n+# #         return jsonify({'error': 'File not found'}), 404\n+\n+# #     os.remove(path)\n+# #     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+\n+# # if __name__ == '__main__':\n+# #     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754944273324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,86 +1,66 @@\n-from flask import Flask, request, jsonify, send_from_directory, render_template\n+from flask import Flask, request, jsonify, send_from_directory\n from flask_cors import CORS\n import os\n-from werkzeug.utils import secure_filename\n from datetime import datetime\n-import uuid\n \n-# === CONFIG ===\n-UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+app = Flask(__name__)\n+CORS(app)\n \n-app = Flask(__name__, template_folder='templates', static_folder='static')\n-CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n+UPLOAD_FOLDER = 'uploads'\n app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-def allowed_file(filename):\n-    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+# Fake stats storage (could be replaced with database)\n+videos_data = []\n \n-# === Frontend route ===\n-@app.route('/')\n-def index():\n-    return render_template('index.html')\n-\n-# --- Upload video ---\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n-        return jsonify({'error': 'No video file found in request'}), 400\n-\n+        return jsonify({\"error\": \"No video file provided\"}), 400\n+    \n     file = request.files['video']\n     if file.filename == '':\n-        return jsonify({'error': 'No selected file'}), 400\n+        return jsonify({\"error\": \"No selected file\"}), 400\n+    \n+    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n+    file.save(filepath)\n \n-    if file and allowed_file(file.filename):\n-        original_filename = secure_filename(file.filename)\n-        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-        file.save(save_path)\n+    videos_data.append({\n+        \"title\": file.filename,\n+        \"url\": f\"/uploads/{file.filename}\",\n+        \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n+        \"views\": 0,\n+        \"likes\": 0\n+    })\n \n-        return jsonify({\n-            'message': 'File uploaded successfully',\n-            'filename': unique_filename,\n-            'url': f\"/uploads/{unique_filename}\"\n-        }), 201\n+    return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n \n-    return jsonify({'error': 'Invalid file type'}), 400\n-\n-# --- List videos ---\n @app.route('/videos', methods=['GET'])\n-def list_videos():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-    return jsonify(files)\n+def get_videos():\n+    return jsonify([v[\"title\"] for v in videos_data])\n \n-# --- Serve uploaded video ---\n-@app.route('/uploads/<path:filename>', methods=['GET'])\n+@app.route('/uploads/<path:filename>')\n def serve_video(filename):\n     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n-# --- Delete video ---\n-@app.route('/delete-video/<filename>', methods=['DELETE'])\n-def delete_video(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    total_videos = len(videos_data)\n+    total_views = sum(v[\"views\"] for v in videos_data)\n+    total_likes = sum(v[\"likes\"] for v in videos_data)\n+    \n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": videos_data[-5:]  # last 5 uploads\n+    })\n \n-    os.remove(path)\n-    return jsonify({'message': f'{filename} deleted successfully'})\n-\n if __name__ == '__main__':\n-    app.run(host='0.0.0.0', port=5000, debug=True)\n+    app.run(debug=True, port=5000)\n \n \n-\n # from flask import Flask, request, jsonify, send_from_directory\n # from flask_cors import CORS\n # import os\n # from werkzeug.utils import secure_filename\n@@ -289,214 +269,4 @@\n \n \n # # if __name__ == '__main__':\n # #     app.run(host='0.0.0.0', port=5000, debug=True)\n-from flask import Flask, request, jsonify, send_from_directory\n-from flask_cors import CORS\n-import os\n-from werkzeug.utils import secure_filename\n-from datetime import datetime\n-import uuid\n-\n-# === CONFIG ===\n-UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-app = Flask(__name__)\n-CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n-app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-def allowed_file(filename):\n-    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-# --- Upload video ---\n-@app.route('/upload', methods=['POST'])\n-def upload_video():\n-    if 'video' not in request.files:\n-        return jsonify({'error': 'No video file found in request'}), 400\n-\n-    file = request.files['video']\n-    if file.filename == '':\n-        return jsonify({'error': 'No selected file'}), 400\n-\n-    if file and allowed_file(file.filename):\n-        original_filename = secure_filename(file.filename)\n-        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-        file.save(save_path)\n-\n-        return jsonify({\n-            'message': 'File uploaded successfully',\n-            'filename': unique_filename,\n-            'url': f\"/uploads/{unique_filename}\"\n-        }), 201\n-\n-    return jsonify({'error': 'Invalid file type'}), 400\n-\n-# --- List videos ---\n-@app.route('/videos', methods=['GET'])\n-def list_videos():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-    return jsonify(files)\n-\n-# --- Serve uploaded video ---\n-@app.route('/uploads/<path:filename>', methods=['GET'])\n-def serve_video(filename):\n-    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-# --- Get video info ---\n-@app.route('/video-info/<filename>', methods=['GET'])\n-def video_info(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n-\n-    stat = os.stat(path)\n-    return jsonify({\n-        'name': filename,\n-        'size_kb': round(stat.st_size / 1024, 2),\n-        'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-    })\n-\n-# --- Delete video ---\n-@app.route('/delete-video/<filename>', methods=['DELETE'])\n-def delete_video(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n-\n-    os.remove(path)\n-    return jsonify({'message': f'{filename} deleted successfully'})\n-\n-# --- Dashboard API ---\n-@app.route('/dashboard', methods=['GET'])\n-def dashboard():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-\n-    total_videos = len(files)\n-    total_likes = total_videos * 10  # Dummy like count (replace with DB)\n-    total_views = total_videos * 120  # Dummy views count (replace with DB)\n-\n-    recent_activity = []\n-    for f in files[:5]:\n-        stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n-        recent_activity.append({\n-            \"type\": \"upload\",\n-            \"title\": f,\n-            \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n-            \"url\": f\"/uploads/{f}\"\n-        })\n-\n-    return jsonify({\n-        \"totalVideos\": total_videos,\n-        \"totalViews\": total_views,\n-        \"totalLikes\": total_likes,\n-        \"recentActivity\": recent_activity\n-    })\n-\n-if __name__ == '__main__':\n-    app.run(host='0.0.0.0', port=5000, debug=True)\n-\n-# from flask import Flask, request, jsonify, send_from_directory\n-# from flask_cors import CORS\n-# import os\n-# from werkzeug.utils import secure_filename\n-# from datetime import datetime\n-# import uuid\n-\n-# # === CONFIG ===\n-# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-# app = Flask(__name__)\n-# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n-\n-# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-# # Ensure uploads folder exists\n-# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-\n-# def allowed_file(filename):\n-#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-\n-# @app.route('/upload', methods=['POST'])\n-# def upload_video():\n-#     if 'video' not in request.files:\n-#         return jsonify({'error': 'No video file found in request'}), 400\n-\n-#     file = request.files['video']\n-#     if file.filename == '':\n-#         return jsonify({'error': 'No selected file'}), 400\n-\n-#     if file and allowed_file(file.filename):\n-#         original_filename = secure_filename(file.filename)\n-#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-#         file.save(save_path)\n-\n-#         return jsonify({\n-#             'message': 'File uploaded successfully',\n-#             'filename': unique_filename,\n-#             'url': f\"/uploads/{unique_filename}\"\n-#         }), 201\n-\n-#     return jsonify({'error': 'Invalid file type'}), 400\n-\n-\n-# @app.route('/videos', methods=['GET'])\n-# def list_videos():\n-#     files = sorted(\n-#         os.listdir(app.config['UPLOAD_FOLDER']),\n-#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-#         reverse=True\n-#     )\n-#     return jsonify(files)\n-\n-\n-# @app.route('/uploads/<path:filename>', methods=['GET'])\n-# def serve_video(filename):\n-#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-\n-# @app.route('/video-info/<filename>', methods=['GET'])\n-# def video_info(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     stat = os.stat(path)\n-#     return jsonify({\n-#         'name': filename,\n-#         'size_kb': round(stat.st_size / 1024, 2),\n-#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-#     })\n-\n-\n-# @app.route('/delete-video/<filename>', methods=['DELETE'])\n-# def delete_video(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     os.remove(path)\n-#     return jsonify({'message': f'{filename} deleted successfully'})\n-\n-\n-# if __name__ == '__main__':\n-#     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754944284432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,86 @@\n-from flask import Flask, request, jsonify, send_from_directory\n+from flask import Flask, request, jsonify, send_from_directory, render_template\n from flask_cors import CORS\n import os\n+from werkzeug.utils import secure_filename\n from datetime import datetime\n+import uuid\n \n-app = Flask(__name__)\n-CORS(app)\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n \n-UPLOAD_FOLDER = 'uploads'\n+app = Flask(__name__, template_folder='templates', static_folder='static')\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-# Fake stats storage (could be replaced with database)\n-videos_data = []\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n \n+# === Frontend route ===\n+@app.route('/')\n+def index():\n+    return render_template('index.html')\n+\n+# --- Upload video ---\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n-        return jsonify({\"error\": \"No video file provided\"}), 400\n-    \n+        return jsonify({'error': 'No video file found in request'}), 400\n+\n     file = request.files['video']\n     if file.filename == '':\n-        return jsonify({\"error\": \"No selected file\"}), 400\n-    \n-    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n-    file.save(filepath)\n+        return jsonify({'error': 'No selected file'}), 400\n \n-    videos_data.append({\n-        \"title\": file.filename,\n-        \"url\": f\"/uploads/{file.filename}\",\n-        \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n-        \"views\": 0,\n-        \"likes\": 0\n-    })\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n \n-    return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n \n+    return jsonify({'error': 'Invalid file type'}), 400\n+\n+# --- List videos ---\n @app.route('/videos', methods=['GET'])\n-def get_videos():\n-    return jsonify([v[\"title\"] for v in videos_data])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n \n-@app.route('/uploads/<path:filename>')\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n def serve_video(filename):\n     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n-@app.route('/dashboard', methods=['GET'])\n-def dashboard():\n-    total_videos = len(videos_data)\n-    total_views = sum(v[\"views\"] for v in videos_data)\n-    total_likes = sum(v[\"likes\"] for v in videos_data)\n-    \n-    return jsonify({\n-        \"totalVideos\": total_videos,\n-        \"totalViews\": total_views,\n-        \"totalLikes\": total_likes,\n-        \"recentActivity\": videos_data[-5:]  # last 5 uploads\n-    })\n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n \n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n+\n if __name__ == '__main__':\n-    app.run(debug=True, port=5000)\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n \n \n+\n # from flask import Flask, request, jsonify, send_from_directory\n # from flask_cors import CORS\n # import os\n # from werkzeug.utils import secure_filename\n"
                },
                {
                    "date": 1754944348133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,80 @@\n-from flask import Flask, request, jsonify, send_from_directory, render_template\n+from flask import Flask, request, jsonify, send_from_directory\n from flask_cors import CORS\n import os\n-from werkzeug.utils import secure_filename\n from datetime import datetime\n-import uuid\n \n-# === CONFIG ===\n-UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+app = Flask(__name__)\n+CORS(app)\n \n-app = Flask(__name__, template_folder='templates', static_folder='static')\n-CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n-app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n+UPLOAD_FOLDER = 'uploads'\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-def allowed_file(filename):\n-    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+# In-memory \"database\"\n+videos_data = []\n \n-# === Frontend route ===\n-@app.route('/')\n-def index():\n-    return render_template('index.html')\n-\n-# --- Upload video ---\n+# -----------------------\n+# UPLOAD VIDEO\n+# -----------------------\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n-        return jsonify({'error': 'No video file found in request'}), 400\n+        return jsonify({\"error\": \"No video file provided\"}), 400\n \n     file = request.files['video']\n     if file.filename == '':\n-        return jsonify({'error': 'No selected file'}), 400\n+        return jsonify({\"error\": \"No selected file\"}), 400\n \n-    if file and allowed_file(file.filename):\n-        original_filename = secure_filename(file.filename)\n-        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-        file.save(save_path)\n+    filepath = os.path.join(UPLOAD_FOLDER, file.filename)\n+    file.save(filepath)\n \n-        return jsonify({\n-            'message': 'File uploaded successfully',\n-            'filename': unique_filename,\n-            'url': f\"/uploads/{unique_filename}\"\n-        }), 201\n+    videos_data.append({\n+        \"title\": file.filename,\n+        \"url\": f\"/uploads/{file.filename}\",\n+        \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n+        \"views\": 0,\n+        \"likes\": 0\n+    })\n \n-    return jsonify({'error': 'Invalid file type'}), 400\n+    return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n \n-# --- List videos ---\n+# -----------------------\n+# GET ALL VIDEOS (Home)\n+# -----------------------\n @app.route('/videos', methods=['GET'])\n-def list_videos():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-    return jsonify(files)\n+def get_videos():\n+    return jsonify([v[\"title\"] for v in videos_data])\n \n-# --- Serve uploaded video ---\n-@app.route('/uploads/<path:filename>', methods=['GET'])\n+# -----------------------\n+# SERVE VIDEO FILES\n+# -----------------------\n+@app.route('/uploads/<path:filename>')\n def serve_video(filename):\n-    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+    return send_from_directory(UPLOAD_FOLDER, filename)\n \n-# --- Delete video ---\n-@app.route('/delete-video/<filename>', methods=['DELETE'])\n-def delete_video(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n+# -----------------------\n+# DASHBOARD DATA\n+# -----------------------\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    total_videos = len(videos_data)\n+    total_views = sum(v[\"views\"] for v in videos_data)\n+    total_likes = sum(v[\"likes\"] for v in videos_data)\n \n-    os.remove(path)\n-    return jsonify({'message': f'{filename} deleted successfully'})\n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": videos_data[-5:]  # last 5 uploads\n+    })\n \n+# -----------------------\n+# RUN SERVER\n+# -----------------------\n if __name__ == '__main__':\n-    app.run(host='0.0.0.0', port=5000, debug=True)\n+    app.run(port=5000, debug=True)\n \n-\n-\n-# from flask import Flask, request, jsonify, send_from_directory\n+# from flask import Flask, request, jsonify, send_from_directory, render_template\n # from flask_cors import CORS\n # import os\n # from werkzeug.utils import secure_filename\n # from datetime import datetime\n@@ -91,9 +84,9 @@\n # UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n \n-# app = Flask(__name__)\n+# app = Flask(__name__, template_folder='templates', static_folder='static')\n # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n \n # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n@@ -102,8 +95,13 @@\n \n # def allowed_file(filename):\n #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n \n+# # === Frontend route ===\n+# @app.route('/')\n+# def index():\n+#     return render_template('index.html')\n+\n # # --- Upload video ---\n # @app.route('/upload', methods=['POST'])\n # def upload_video():\n #     if 'video' not in request.files:\n@@ -141,22 +139,8 @@\n # @app.route('/uploads/<path:filename>', methods=['GET'])\n # def serve_video(filename):\n #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n-# # --- Get video info ---\n-# @app.route('/video-info/<filename>', methods=['GET'])\n-# def video_info(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     stat = os.stat(path)\n-#     return jsonify({\n-#         'name': filename,\n-#         'size_kb': round(stat.st_size / 1024, 2),\n-#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-#     })\n-\n # # --- Delete video ---\n # @app.route('/delete-video/<filename>', methods=['DELETE'])\n # def delete_video(filename):\n #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n@@ -165,41 +149,13 @@\n \n #     os.remove(path)\n #     return jsonify({'message': f'{filename} deleted successfully'})\n \n-# # --- Dashboard API ---\n-# @app.route('/dashboard', methods=['GET'])\n-# def dashboard():\n-#     files = sorted(\n-#         os.listdir(app.config['UPLOAD_FOLDER']),\n-#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-#         reverse=True\n-#     )\n+# if __name__ == '__main__':\n+#     app.run(host='0.0.0.0', port=5000, debug=True)\n \n-#     total_videos = len(files)\n-#     total_likes = total_videos * 10  # Dummy like count (replace with DB)\n-#     total_views = total_videos * 120  # Dummy views count (replace with DB)\n \n-#     recent_activity = []\n-#     for f in files[:5]:\n-#         stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n-#         recent_activity.append({\n-#             \"type\": \"upload\",\n-#             \"title\": f,\n-#             \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n-#             \"url\": f\"/uploads/{f}\"\n-#         })\n \n-#     return jsonify({\n-#         \"totalVideos\": total_videos,\n-#         \"totalViews\": total_views,\n-#         \"totalLikes\": total_likes,\n-#         \"recentActivity\": recent_activity\n-#     })\n-\n-# if __name__ == '__main__':\n-#     app.run(host='0.0.0.0', port=5000, debug=True)\n-\n # # from flask import Flask, request, jsonify, send_from_directory\n # # from flask_cors import CORS\n # # import os\n # # from werkzeug.utils import secure_filename\n@@ -211,21 +167,19 @@\n # # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n # # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n \n # # app = Flask(__name__)\n-# # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+# # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n \n # # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n # # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n \n-# # # Ensure uploads folder exists\n # # os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-\n # # def allowed_file(filename):\n # #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n \n-\n+# # # --- Upload video ---\n # # @app.route('/upload', methods=['POST'])\n # # def upload_video():\n # #     if 'video' not in request.files:\n # #         return jsonify({'error': 'No video file found in request'}), 400\n@@ -247,9 +201,9 @@\n # #         }), 201\n \n # #     return jsonify({'error': 'Invalid file type'}), 400\n \n-\n+# # # --- List videos ---\n # # @app.route('/videos', methods=['GET'])\n # # def list_videos():\n # #     files = sorted(\n # #         os.listdir(app.config['UPLOAD_FOLDER']),\n@@ -257,14 +211,14 @@\n # #         reverse=True\n # #     )\n # #     return jsonify(files)\n \n-\n+# # # --- Serve uploaded video ---\n # # @app.route('/uploads/<path:filename>', methods=['GET'])\n # # def serve_video(filename):\n # #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n-\n+# # # --- Get video info ---\n # # @app.route('/video-info/<filename>', methods=['GET'])\n # # def video_info(filename):\n # #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n # #     if not os.path.exists(path):\n@@ -276,9 +230,9 @@\n # #         'size_kb': round(stat.st_size / 1024, 2),\n # #         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n # #     })\n \n-\n+# # # --- Delete video ---\n # # @app.route('/delete-video/<filename>', methods=['DELETE'])\n # # def delete_video(filename):\n # #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n # #     if not os.path.exists(path):\n@@ -286,7 +240,128 @@\n \n # #     os.remove(path)\n # #     return jsonify({'message': f'{filename} deleted successfully'})\n \n+# # # --- Dashboard API ---\n+# # @app.route('/dashboard', methods=['GET'])\n+# # def dashboard():\n+# #     files = sorted(\n+# #         os.listdir(app.config['UPLOAD_FOLDER']),\n+# #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+# #         reverse=True\n+# #     )\n \n+# #     total_videos = len(files)\n+# #     total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+# #     total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+# #     recent_activity = []\n+# #     for f in files[:5]:\n+# #         stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+# #         recent_activity.append({\n+# #             \"type\": \"upload\",\n+# #             \"title\": f,\n+# #             \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+# #             \"url\": f\"/uploads/{f}\"\n+# #         })\n+\n+# #     return jsonify({\n+# #         \"totalVideos\": total_videos,\n+# #         \"totalViews\": total_views,\n+# #         \"totalLikes\": total_likes,\n+# #         \"recentActivity\": recent_activity\n+# #     })\n+\n # # if __name__ == '__main__':\n # #     app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+# # # from flask import Flask, request, jsonify, send_from_directory\n+# # # from flask_cors import CORS\n+# # # import os\n+# # # from werkzeug.utils import secure_filename\n+# # # from datetime import datetime\n+# # # import uuid\n+\n+# # # # === CONFIG ===\n+# # # UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# # # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# # # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# # # app = Flask(__name__)\n+# # # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+\n+# # # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# # # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# # # # Ensure uploads folder exists\n+# # # os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+\n+# # # def allowed_file(filename):\n+# # #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+\n+# # # @app.route('/upload', methods=['POST'])\n+# # # def upload_video():\n+# # #     if 'video' not in request.files:\n+# # #         return jsonify({'error': 'No video file found in request'}), 400\n+\n+# # #     file = request.files['video']\n+# # #     if file.filename == '':\n+# # #         return jsonify({'error': 'No selected file'}), 400\n+\n+# # #     if file and allowed_file(file.filename):\n+# # #         original_filename = secure_filename(file.filename)\n+# # #         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+# # #         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+# # #         file.save(save_path)\n+\n+# # #         return jsonify({\n+# # #             'message': 'File uploaded successfully',\n+# # #             'filename': unique_filename,\n+# # #             'url': f\"/uploads/{unique_filename}\"\n+# # #         }), 201\n+\n+# # #     return jsonify({'error': 'Invalid file type'}), 400\n+\n+\n+# # # @app.route('/videos', methods=['GET'])\n+# # # def list_videos():\n+# # #     files = sorted(\n+# # #         os.listdir(app.config['UPLOAD_FOLDER']),\n+# # #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+# # #         reverse=True\n+# # #     )\n+# # #     return jsonify(files)\n+\n+\n+# # # @app.route('/uploads/<path:filename>', methods=['GET'])\n+# # # def serve_video(filename):\n+# # #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+\n+# # # @app.route('/video-info/<filename>', methods=['GET'])\n+# # # def video_info(filename):\n+# # #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+# # #     if not os.path.exists(path):\n+# # #         return jsonify({'error': 'File not found'}), 404\n+\n+# # #     stat = os.stat(path)\n+# # #     return jsonify({\n+# # #         'name': filename,\n+# # #         'size_kb': round(stat.st_size / 1024, 2),\n+# # #         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+# # #     })\n+\n+\n+# # # @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# # # def delete_video(filename):\n+# # #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+# # #     if not os.path.exists(path):\n+# # #         return jsonify({'error': 'File not found'}), 404\n+\n+# # #     os.remove(path)\n+# # #     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+\n+# # # if __name__ == '__main__':\n+# # #     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754944405515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+from flask import Flask, request, jsonify, send_from_directory\n+from flask_cors import CORS\n+import os\n+from werkzeug.utils import secure_filename\n+from datetime import datetime\n+import uuid\n+\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+app = Flask(__name__)\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# --- Upload video ---\n+@app.route('/upload', methods=['POST'])\n+def upload_video():\n+    if 'video' not in request.files:\n+        return jsonify({'error': 'No video file found in request'}), 400\n+\n+    file = request.files['video']\n+    if file.filename == '':\n+        return jsonify({'error': 'No selected file'}), 400\n+\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n+\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n+\n+    return jsonify({'error': 'Invalid file type'}), 400\n+\n+# --- List videos ---\n+@app.route('/videos', methods=['GET'])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n+\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n+def serve_video(filename):\n+    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# --- Get video info ---\n+@app.route('/video-info/<filename>', methods=['GET'])\n+def video_info(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    stat = os.stat(path)\n+    return jsonify({\n+        'name': filename,\n+        'size_kb': round(stat.st_size / 1024, 2),\n+        'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+    })\n+\n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n+\n+# --- Dashboard API ---\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+\n+    total_videos = len(files)\n+    total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+    total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+    recent_activity = []\n+    for f in files[:5]:\n+        stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+        recent_activity.append({\n+            \"type\": \"upload\",\n+            \"title\": f,\n+            \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+            \"url\": f\"/uploads/{f}\"\n+        })\n+\n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": recent_activity\n+    })\n+\n+if __name__ == '__main__':\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+# from flask import Flask, request, jsonify, send_from_directory\n+# from flask_cors import CORS\n+# import os\n+# from werkzeug.utils import secure_filename\n+# from datetime import datetime\n+# import uuid\n+\n+# # === CONFIG ===\n+# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# app = Flask(__name__)\n+# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+\n+# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# # Ensure uploads folder exists\n+# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+\n+# def allowed_file(filename):\n+#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+\n+# @app.route('/upload', methods=['POST'])\n+# def upload_video():\n+#     if 'video' not in request.files:\n+#         return jsonify({'error': 'No video file found in request'}), 400\n+\n+#     file = request.files['video']\n+#     if file.filename == '':\n+#         return jsonify({'error': 'No selected file'}), 400\n+\n+#     if file and allowed_file(file.filename):\n+#         original_filename = secure_filename(file.filename)\n+#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+#         file.save(save_path)\n+\n+#         return jsonify({\n+#             'message': 'File uploaded successfully',\n+#             'filename': unique_filename,\n+#             'url': f\"/uploads/{unique_filename}\"\n+#         }), 201\n+\n+#     return jsonify({'error': 'Invalid file type'}), 400\n+\n+\n+# @app.route('/videos', methods=['GET'])\n+# def list_videos():\n+#     files = sorted(\n+#         os.listdir(app.config['UPLOAD_FOLDER']),\n+#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+#         reverse=True\n+#     )\n+#     return jsonify(files)\n+\n+\n+# @app.route('/uploads/<path:filename>', methods=['GET'])\n+# def serve_video(filename):\n+#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+\n+# @app.route('/video-info/<filename>', methods=['GET'])\n+# def video_info(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     stat = os.stat(path)\n+#     return jsonify({\n+#         'name': filename,\n+#         'size_kb': round(stat.st_size / 1024, 2),\n+#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+#     })\n+\n+\n+# @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# def delete_video(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     os.remove(path)\n+#     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+\n+# if __name__ == '__main__':\n+#     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754944424306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,220 +1,10 @@\n from flask import Flask, request, jsonify, send_from_directory\n from flask_cors import CORS\n import os\n-from werkzeug.utils import secure_filename\n from datetime import datetime\n-import uuid\n \n-# === CONFIG ===\n-UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n app = Flask(__name__)\n-CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n-app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-def allowed_file(filename):\n-    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-# --- Upload video ---\n-@app.route('/upload', methods=['POST'])\n-def upload_video():\n-    if 'video' not in request.files:\n-        return jsonify({'error': 'No video file found in request'}), 400\n-\n-    file = request.files['video']\n-    if file.filename == '':\n-        return jsonify({'error': 'No selected file'}), 400\n-\n-    if file and allowed_file(file.filename):\n-        original_filename = secure_filename(file.filename)\n-        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-        file.save(save_path)\n-\n-        return jsonify({\n-            'message': 'File uploaded successfully',\n-            'filename': unique_filename,\n-            'url': f\"/uploads/{unique_filename}\"\n-        }), 201\n-\n-    return jsonify({'error': 'Invalid file type'}), 400\n-\n-# --- List videos ---\n-@app.route('/videos', methods=['GET'])\n-def list_videos():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-    return jsonify(files)\n-\n-# --- Serve uploaded video ---\n-@app.route('/uploads/<path:filename>', methods=['GET'])\n-def serve_video(filename):\n-    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-# --- Get video info ---\n-@app.route('/video-info/<filename>', methods=['GET'])\n-def video_info(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n-\n-    stat = os.stat(path)\n-    return jsonify({\n-        'name': filename,\n-        'size_kb': round(stat.st_size / 1024, 2),\n-        'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-    })\n-\n-# --- Delete video ---\n-@app.route('/delete-video/<filename>', methods=['DELETE'])\n-def delete_video(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n-\n-    os.remove(path)\n-    return jsonify({'message': f'{filename} deleted successfully'})\n-\n-# --- Dashboard API ---\n-@app.route('/dashboard', methods=['GET'])\n-def dashboard():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-\n-    total_videos = len(files)\n-    total_likes = total_videos * 10  # Dummy like count (replace with DB)\n-    total_views = total_videos * 120  # Dummy views count (replace with DB)\n-\n-    recent_activity = []\n-    for f in files[:5]:\n-        stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n-        recent_activity.append({\n-            \"type\": \"upload\",\n-            \"title\": f,\n-            \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n-            \"url\": f\"/uploads/{f}\"\n-        })\n-\n-    return jsonify({\n-        \"totalVideos\": total_videos,\n-        \"totalViews\": total_views,\n-        \"totalLikes\": total_likes,\n-        \"recentActivity\": recent_activity\n-    })\n-\n-if __name__ == '__main__':\n-    app.run(host='0.0.0.0', port=5000, debug=True)\n-\n-# from flask import Flask, request, jsonify, send_from_directory\n-# from flask_cors import CORS\n-# import os\n-# from werkzeug.utils import secure_filename\n-# from datetime import datetime\n-# import uuid\n-\n-# # === CONFIG ===\n-# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-# app = Flask(__name__)\n-# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n-\n-# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-# # Ensure uploads folder exists\n-# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-\n-# def allowed_file(filename):\n-#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-\n-# @app.route('/upload', methods=['POST'])\n-# def upload_video():\n-#     if 'video' not in request.files:\n-#         return jsonify({'error': 'No video file found in request'}), 400\n-\n-#     file = request.files['video']\n-#     if file.filename == '':\n-#         return jsonify({'error': 'No selected file'}), 400\n-\n-#     if file and allowed_file(file.filename):\n-#         original_filename = secure_filename(file.filename)\n-#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-#         file.save(save_path)\n-\n-#         return jsonify({\n-#             'message': 'File uploaded successfully',\n-#             'filename': unique_filename,\n-#             'url': f\"/uploads/{unique_filename}\"\n-#         }), 201\n-\n-#     return jsonify({'error': 'Invalid file type'}), 400\n-\n-\n-# @app.route('/videos', methods=['GET'])\n-# def list_videos():\n-#     files = sorted(\n-#         os.listdir(app.config['UPLOAD_FOLDER']),\n-#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-#         reverse=True\n-#     )\n-#     return jsonify(files)\n-\n-\n-# @app.route('/uploads/<path:filename>', methods=['GET'])\n-# def serve_video(filename):\n-#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-\n-# @app.route('/video-info/<filename>', methods=['GET'])\n-# def video_info(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     stat = os.stat(path)\n-#     return jsonify({\n-#         'name': filename,\n-#         'size_kb': round(stat.st_size / 1024, 2),\n-#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-#     })\n-\n-\n-# @app.route('/delete-video/<filename>', methods=['DELETE'])\n-# def delete_video(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     os.remove(path)\n-#     return jsonify({'message': f'{filename} deleted successfully'})\n-\n-\n-# if __name__ == '__main__':\n-#     app.run(host='0.0.0.0', port=5000, debug=True)\n-from flask import Flask, request, jsonify, send_from_directory\n-from flask_cors import CORS\n-import os\n-from datetime import datetime\n-\n-app = Flask(__name__)\n CORS(app)\n \n UPLOAD_FOLDER = 'uploads'\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n"
                },
                {
                    "date": 1754944436457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,292 @@\n+from flask import Flask, request, jsonify, send_from_directory, render_template\n+from flask_cors import CORS\n+import os\n+from werkzeug.utils import secure_filename\n+from datetime import datetime\n+import uuid\n+\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+app = Flask(__name__, template_folder='templates', static_folder='static')\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# === Frontend route ===\n+@app.route('/')\n+def index():\n+    return render_template('index.html')\n+\n+# --- Upload video ---\n+@app.route('/upload', methods=['POST'])\n+def upload_video():\n+    if 'video' not in request.files:\n+        return jsonify({'error': 'No video file found in request'}), 400\n+\n+    file = request.files['video']\n+    if file.filename == '':\n+        return jsonify({'error': 'No selected file'}), 400\n+\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n+\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n+\n+    return jsonify({'error': 'Invalid file type'}), 400\n+\n+# --- List videos ---\n+@app.route('/videos', methods=['GET'])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n+\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n+def serve_video(filename):\n+    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n+\n+if __name__ == '__main__':\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+\n+\n+# from flask import Flask, request, jsonify, send_from_directory\n+# from flask_cors import CORS\n+# import os\n+# from werkzeug.utils import secure_filename\n+# from datetime import datetime\n+# import uuid\n+\n+# # === CONFIG ===\n+# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# app = Flask(__name__)\n+# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+# def allowed_file(filename):\n+#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# # --- Upload video ---\n+# @app.route('/upload', methods=['POST'])\n+# def upload_video():\n+#     if 'video' not in request.files:\n+#         return jsonify({'error': 'No video file found in request'}), 400\n+\n+#     file = request.files['video']\n+#     if file.filename == '':\n+#         return jsonify({'error': 'No selected file'}), 400\n+\n+#     if file and allowed_file(file.filename):\n+#         original_filename = secure_filename(file.filename)\n+#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+#         file.save(save_path)\n+\n+#         return jsonify({\n+#             'message': 'File uploaded successfully',\n+#             'filename': unique_filename,\n+#             'url': f\"/uploads/{unique_filename}\"\n+#         }), 201\n+\n+#     return jsonify({'error': 'Invalid file type'}), 400\n+\n+# # --- List videos ---\n+# @app.route('/videos', methods=['GET'])\n+# def list_videos():\n+#     files = sorted(\n+#         os.listdir(app.config['UPLOAD_FOLDER']),\n+#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+#         reverse=True\n+#     )\n+#     return jsonify(files)\n+\n+# # --- Serve uploaded video ---\n+# @app.route('/uploads/<path:filename>', methods=['GET'])\n+# def serve_video(filename):\n+#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# # --- Get video info ---\n+# @app.route('/video-info/<filename>', methods=['GET'])\n+# def video_info(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     stat = os.stat(path)\n+#     return jsonify({\n+#         'name': filename,\n+#         'size_kb': round(stat.st_size / 1024, 2),\n+#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+#     })\n+\n+# # --- Delete video ---\n+# @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# def delete_video(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     os.remove(path)\n+#     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+# # --- Dashboard API ---\n+# @app.route('/dashboard', methods=['GET'])\n+# def dashboard():\n+#     files = sorted(\n+#         os.listdir(app.config['UPLOAD_FOLDER']),\n+#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+#         reverse=True\n+#     )\n+\n+#     total_videos = len(files)\n+#     total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+#     total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+#     recent_activity = []\n+#     for f in files[:5]:\n+#         stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+#         recent_activity.append({\n+#             \"type\": \"upload\",\n+#             \"title\": f,\n+#             \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+#             \"url\": f\"/uploads/{f}\"\n+#         })\n+\n+#     return jsonify({\n+#         \"totalVideos\": total_videos,\n+#         \"totalViews\": total_views,\n+#         \"totalLikes\": total_likes,\n+#         \"recentActivity\": recent_activity\n+#     })\n+\n+# if __name__ == '__main__':\n+#     app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+# # from flask import Flask, request, jsonify, send_from_directory\n+# # from flask_cors import CORS\n+# # import os\n+# # from werkzeug.utils import secure_filename\n+# # from datetime import datetime\n+# # import uuid\n+\n+# # # === CONFIG ===\n+# # UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# # app = Flask(__name__)\n+# # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+\n+# # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# # # Ensure uploads folder exists\n+# # os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+\n+# # def allowed_file(filename):\n+# #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+\n+# # @app.route('/upload', methods=['POST'])\n+# # def upload_video():\n+# #     if 'video' not in request.files:\n+# #         return jsonify({'error': 'No video file found in request'}), 400\n+\n+# #     file = request.files['video']\n+# #     if file.filename == '':\n+# #         return jsonify({'error': 'No selected file'}), 400\n+\n+# #     if file and allowed_file(file.filename):\n+# #         original_filename = secure_filename(file.filename)\n+# #         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+# #         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+# #         file.save(save_path)\n+\n+# #         return jsonify({\n+# #             'message': 'File uploaded successfully',\n+# #             'filename': unique_filename,\n+# #             'url': f\"/uploads/{unique_filename}\"\n+# #         }), 201\n+\n+# #     return jsonify({'error': 'Invalid file type'}), 400\n+\n+\n+# # @app.route('/videos', methods=['GET'])\n+# # def list_videos():\n+# #     files = sorted(\n+# #         os.listdir(app.config['UPLOAD_FOLDER']),\n+# #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+# #         reverse=True\n+# #     )\n+# #     return jsonify(files)\n+\n+\n+# # @app.route('/uploads/<path:filename>', methods=['GET'])\n+# # def serve_video(filename):\n+# #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+\n+# # @app.route('/video-info/<filename>', methods=['GET'])\n+# # def video_info(filename):\n+# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+# #     if not os.path.exists(path):\n+# #         return jsonify({'error': 'File not found'}), 404\n+\n+# #     stat = os.stat(path)\n+# #     return jsonify({\n+# #         'name': filename,\n+# #         'size_kb': round(stat.st_size / 1024, 2),\n+# #         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+# #     })\n+\n+\n+# # @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# # def delete_video(filename):\n+# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+# #     if not os.path.exists(path):\n+# #         return jsonify({'error': 'File not found'}), 404\n+\n+# #     os.remove(path)\n+# #     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+\n+# # if __name__ == '__main__':\n+# #     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754944502301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,86 +1,60 @@\n-from flask import Flask, request, jsonify, send_from_directory, render_template\n+from flask import Flask, request, jsonify, send_from_directory\n from flask_cors import CORS\n import os\n-from werkzeug.utils import secure_filename\n from datetime import datetime\n-import uuid\n \n-# === CONFIG ===\n-UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+app = Flask(__name__)\n+CORS(app)\n \n-app = Flask(__name__, template_folder='templates', static_folder='static')\n-CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n+UPLOAD_FOLDER = 'uploads'\n app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-def allowed_file(filename):\n-    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+# Fake in-memory database\n+videos_data = []\n \n-# === Frontend route ===\n-@app.route('/')\n-def index():\n-    return render_template('index.html')\n-\n-# --- Upload video ---\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n-        return jsonify({'error': 'No video file found in request'}), 400\n+        return jsonify({\"error\": \"No video file provided\"}), 400\n \n     file = request.files['video']\n     if file.filename == '':\n-        return jsonify({'error': 'No selected file'}), 400\n+        return jsonify({\"error\": \"No selected file\"}), 400\n \n-    if file and allowed_file(file.filename):\n-        original_filename = secure_filename(file.filename)\n-        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-        file.save(save_path)\n+    # Save file\n+    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n+    file.save(filepath)\n \n-        return jsonify({\n-            'message': 'File uploaded successfully',\n-            'filename': unique_filename,\n-            'url': f\"/uploads/{unique_filename}\"\n-        }), 201\n+    # Add to in-memory database\n+    videos_data.append({\n+        \"title\": file.filename,\n+        \"url\": f\"/uploads/{file.filename}\",\n+        \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n+        \"views\": 0,\n+        \"likes\": 0\n+    })\n \n-    return jsonify({'error': 'Invalid file type'}), 400\n+    return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n \n-# --- List videos ---\n+\n @app.route('/videos', methods=['GET'])\n-def list_videos():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-    return jsonify(files)\n+def get_videos():\n+    \"\"\"Return just filenames for the home page.\"\"\"\n+    return jsonify([v[\"title\"] for v in videos_data])\n \n-# --- Serve uploaded video ---\n-@app.route('/uploads/<path:filename>', methods=['GET'])\n+\n+@app.route('/uploads/<path:filename>')\n def serve_video(filename):\n+    \"\"\"Serve uploaded video files.\"\"\"\n     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n-# --- Delete video ---\n-@app.route('/delete-video/<filename>', methods=['DELETE'])\n-def delete_video(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n \n-    os.remove(path)\n-    return jsonify({'message': f'{filename} deleted successfully'})\n+@app.route('/\n \n-if __name__ == '__main__':\n-    app.run(host='0.0.0.0', port=5000, debug=True)\n \n \n-\n # from flask import Flask, request, jsonify, send_from_directory\n # from flask_cors import CORS\n # import os\n # from werkzeug.utils import secure_filename\n@@ -289,371 +263,4 @@\n \n \n # # if __name__ == '__main__':\n # #     app.run(host='0.0.0.0', port=5000, debug=True)\n-from flask import Flask, request, jsonify, send_from_directory\n-from flask_cors import CORS\n-import os\n-from datetime import datetime\n-\n-app = Flask(__name__)\n-CORS(app)\n-\n-UPLOAD_FOLDER = 'uploads'\n-os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-# In-memory \"database\"\n-videos_data = []\n-\n-# -----------------------\n-# UPLOAD VIDEO\n-# -----------------------\n-@app.route('/upload', methods=['POST'])\n-def upload_video():\n-    if 'video' not in request.files:\n-        return jsonify({\"error\": \"No video file provided\"}), 400\n-\n-    file = request.files['video']\n-    if file.filename == '':\n-        return jsonify({\"error\": \"No selected file\"}), 400\n-\n-    filepath = os.path.join(UPLOAD_FOLDER, file.filename)\n-    file.save(filepath)\n-\n-    videos_data.append({\n-        \"title\": file.filename,\n-        \"url\": f\"/uploads/{file.filename}\",\n-        \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n-        \"views\": 0,\n-        \"likes\": 0\n-    })\n-\n-    return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n-\n-# -----------------------\n-# GET ALL VIDEOS (Home)\n-# -----------------------\n-@app.route('/videos', methods=['GET'])\n-def get_videos():\n-    return jsonify([v[\"title\"] for v in videos_data])\n-\n-# -----------------------\n-# SERVE VIDEO FILES\n-# -----------------------\n-@app.route('/uploads/<path:filename>')\n-def serve_video(filename):\n-    return send_from_directory(UPLOAD_FOLDER, filename)\n-\n-# -----------------------\n-# DASHBOARD DATA\n-# -----------------------\n-@app.route('/dashboard', methods=['GET'])\n-def dashboard():\n-    total_videos = len(videos_data)\n-    total_views = sum(v[\"views\"] for v in videos_data)\n-    total_likes = sum(v[\"likes\"] for v in videos_data)\n-\n-    return jsonify({\n-        \"totalVideos\": total_videos,\n-        \"totalViews\": total_views,\n-        \"totalLikes\": total_likes,\n-        \"recentActivity\": videos_data[-5:]  # last 5 uploads\n-    })\n-\n-# -----------------------\n-# RUN SERVER\n-# -----------------------\n-if __name__ == '__main__':\n-    app.run(port=5000, debug=True)\n-\n-# from flask import Flask, request, jsonify, send_from_directory, render_template\n-# from flask_cors import CORS\n-# import os\n-# from werkzeug.utils import secure_filename\n-# from datetime import datetime\n-# import uuid\n-\n-# # === CONFIG ===\n-# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-# app = Flask(__name__, template_folder='templates', static_folder='static')\n-# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n-# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-# def allowed_file(filename):\n-#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-# # === Frontend route ===\n-# @app.route('/')\n-# def index():\n-#     return render_template('index.html')\n-\n-# # --- Upload video ---\n-# @app.route('/upload', methods=['POST'])\n-# def upload_video():\n-#     if 'video' not in request.files:\n-#         return jsonify({'error': 'No video file found in request'}), 400\n-\n-#     file = request.files['video']\n-#     if file.filename == '':\n-#         return jsonify({'error': 'No selected file'}), 400\n-\n-#     if file and allowed_file(file.filename):\n-#         original_filename = secure_filename(file.filename)\n-#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-#         file.save(save_path)\n-\n-#         return jsonify({\n-#             'message': 'File uploaded successfully',\n-#             'filename': unique_filename,\n-#             'url': f\"/uploads/{unique_filename}\"\n-#         }), 201\n-\n-#     return jsonify({'error': 'Invalid file type'}), 400\n-\n-# # --- List videos ---\n-# @app.route('/videos', methods=['GET'])\n-# def list_videos():\n-#     files = sorted(\n-#         os.listdir(app.config['UPLOAD_FOLDER']),\n-#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-#         reverse=True\n-#     )\n-#     return jsonify(files)\n-\n-# # --- Serve uploaded video ---\n-# @app.route('/uploads/<path:filename>', methods=['GET'])\n-# def serve_video(filename):\n-#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-# # --- Delete video ---\n-# @app.route('/delete-video/<filename>', methods=['DELETE'])\n-# def delete_video(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     os.remove(path)\n-#     return jsonify({'message': f'{filename} deleted successfully'})\n-\n-# if __name__ == '__main__':\n-#     app.run(host='0.0.0.0', port=5000, debug=True)\n-\n-\n-\n-# # from flask import Flask, request, jsonify, send_from_directory\n-# # from flask_cors import CORS\n-# # import os\n-# # from werkzeug.utils import secure_filename\n-# # from datetime import datetime\n-# # import uuid\n-\n-# # # === CONFIG ===\n-# # UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-# # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-# # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-# # app = Flask(__name__)\n-# # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n-# # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-# # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-# # os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-# # def allowed_file(filename):\n-# #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-# # # --- Upload video ---\n-# # @app.route('/upload', methods=['POST'])\n-# # def upload_video():\n-# #     if 'video' not in request.files:\n-# #         return jsonify({'error': 'No video file found in request'}), 400\n-\n-# #     file = request.files['video']\n-# #     if file.filename == '':\n-# #         return jsonify({'error': 'No selected file'}), 400\n-\n-# #     if file and allowed_file(file.filename):\n-# #         original_filename = secure_filename(file.filename)\n-# #         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-# #         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-# #         file.save(save_path)\n-\n-# #         return jsonify({\n-# #             'message': 'File uploaded successfully',\n-# #             'filename': unique_filename,\n-# #             'url': f\"/uploads/{unique_filename}\"\n-# #         }), 201\n-\n-# #     return jsonify({'error': 'Invalid file type'}), 400\n-\n-# # # --- List videos ---\n-# # @app.route('/videos', methods=['GET'])\n-# # def list_videos():\n-# #     files = sorted(\n-# #         os.listdir(app.config['UPLOAD_FOLDER']),\n-# #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-# #         reverse=True\n-# #     )\n-# #     return jsonify(files)\n-\n-# # # --- Serve uploaded video ---\n-# # @app.route('/uploads/<path:filename>', methods=['GET'])\n-# # def serve_video(filename):\n-# #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-# # # --- Get video info ---\n-# # @app.route('/video-info/<filename>', methods=['GET'])\n-# # def video_info(filename):\n-# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-# #     if not os.path.exists(path):\n-# #         return jsonify({'error': 'File not found'}), 404\n-\n-# #     stat = os.stat(path)\n-# #     return jsonify({\n-# #         'name': filename,\n-# #         'size_kb': round(stat.st_size / 1024, 2),\n-# #         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-# #     })\n-\n-# # # --- Delete video ---\n-# # @app.route('/delete-video/<filename>', methods=['DELETE'])\n-# # def delete_video(filename):\n-# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-# #     if not os.path.exists(path):\n-# #         return jsonify({'error': 'File not found'}), 404\n-\n-# #     os.remove(path)\n-# #     return jsonify({'message': f'{filename} deleted successfully'})\n-\n-# # # --- Dashboard API ---\n-# # @app.route('/dashboard', methods=['GET'])\n-# # def dashboard():\n-# #     files = sorted(\n-# #         os.listdir(app.config['UPLOAD_FOLDER']),\n-# #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-# #         reverse=True\n-# #     )\n-\n-# #     total_videos = len(files)\n-# #     total_likes = total_videos * 10  # Dummy like count (replace with DB)\n-# #     total_views = total_videos * 120  # Dummy views count (replace with DB)\n-\n-# #     recent_activity = []\n-# #     for f in files[:5]:\n-# #         stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n-# #         recent_activity.append({\n-# #             \"type\": \"upload\",\n-# #             \"title\": f,\n-# #             \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n-# #             \"url\": f\"/uploads/{f}\"\n-# #         })\n-\n-# #     return jsonify({\n-# #         \"totalVideos\": total_videos,\n-# #         \"totalViews\": total_views,\n-# #         \"totalLikes\": total_likes,\n-# #         \"recentActivity\": recent_activity\n-# #     })\n-\n-# # if __name__ == '__main__':\n-# #     app.run(host='0.0.0.0', port=5000, debug=True)\n-\n-# # # from flask import Flask, request, jsonify, send_from_directory\n-# # # from flask_cors import CORS\n-# # # import os\n-# # # from werkzeug.utils import secure_filename\n-# # # from datetime import datetime\n-# # # import uuid\n-\n-# # # # === CONFIG ===\n-# # # UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-# # # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-# # # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-# # # app = Flask(__name__)\n-# # # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n-\n-# # # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-# # # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-# # # # Ensure uploads folder exists\n-# # # os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-\n-# # # def allowed_file(filename):\n-# # #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-\n-# # # @app.route('/upload', methods=['POST'])\n-# # # def upload_video():\n-# # #     if 'video' not in request.files:\n-# # #         return jsonify({'error': 'No video file found in request'}), 400\n-\n-# # #     file = request.files['video']\n-# # #     if file.filename == '':\n-# # #         return jsonify({'error': 'No selected file'}), 400\n-\n-# # #     if file and allowed_file(file.filename):\n-# # #         original_filename = secure_filename(file.filename)\n-# # #         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-# # #         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-# # #         file.save(save_path)\n-\n-# # #         return jsonify({\n-# # #             'message': 'File uploaded successfully',\n-# # #             'filename': unique_filename,\n-# # #             'url': f\"/uploads/{unique_filename}\"\n-# # #         }), 201\n-\n-# # #     return jsonify({'error': 'Invalid file type'}), 400\n-\n-\n-# # # @app.route('/videos', methods=['GET'])\n-# # # def list_videos():\n-# # #     files = sorted(\n-# # #         os.listdir(app.config['UPLOAD_FOLDER']),\n-# # #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-# # #         reverse=True\n-# # #     )\n-# # #     return jsonify(files)\n-\n-\n-# # # @app.route('/uploads/<path:filename>', methods=['GET'])\n-# # # def serve_video(filename):\n-# # #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-\n-# # # @app.route('/video-info/<filename>', methods=['GET'])\n-# # # def video_info(filename):\n-# # #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-# # #     if not os.path.exists(path):\n-# # #         return jsonify({'error': 'File not found'}), 404\n-\n-# # #     stat = os.stat(path)\n-# # #     return jsonify({\n-# # #         'name': filename,\n-# # #         'size_kb': round(stat.st_size / 1024, 2),\n-# # #         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-# # #     })\n-\n-\n-# # # @app.route('/delete-video/<filename>', methods=['DELETE'])\n-# # # def delete_video(filename):\n-# # #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-# # #     if not os.path.exists(path):\n-# # #         return jsonify({'error': 'File not found'}), 404\n-\n-# # #     os.remove(path)\n-# # #     return jsonify({'message': f'{filename} deleted successfully'})\n-\n-\n-# # # if __name__ == '__main__':\n-# # #     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754944513521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,60 +1,86 @@\n-from flask import Flask, request, jsonify, send_from_directory\n+from flask import Flask, request, jsonify, send_from_directory, render_template\n from flask_cors import CORS\n import os\n+from werkzeug.utils import secure_filename\n from datetime import datetime\n+import uuid\n \n-app = Flask(__name__)\n-CORS(app)\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n \n-UPLOAD_FOLDER = 'uploads'\n+app = Flask(__name__, template_folder='templates', static_folder='static')\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-# Fake in-memory database\n-videos_data = []\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n \n+# === Frontend route ===\n+@app.route('/')\n+def index():\n+    return render_template('index.html')\n+\n+# --- Upload video ---\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n-        return jsonify({\"error\": \"No video file provided\"}), 400\n+        return jsonify({'error': 'No video file found in request'}), 400\n \n     file = request.files['video']\n     if file.filename == '':\n-        return jsonify({\"error\": \"No selected file\"}), 400\n+        return jsonify({'error': 'No selected file'}), 400\n \n-    # Save file\n-    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n-    file.save(filepath)\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n \n-    # Add to in-memory database\n-    videos_data.append({\n-        \"title\": file.filename,\n-        \"url\": f\"/uploads/{file.filename}\",\n-        \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n-        \"views\": 0,\n-        \"likes\": 0\n-    })\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n \n-    return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n+    return jsonify({'error': 'Invalid file type'}), 400\n \n-\n+# --- List videos ---\n @app.route('/videos', methods=['GET'])\n-def get_videos():\n-    \"\"\"Return just filenames for the home page.\"\"\"\n-    return jsonify([v[\"title\"] for v in videos_data])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n \n-\n-@app.route('/uploads/<path:filename>')\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n def serve_video(filename):\n-    \"\"\"Serve uploaded video files.\"\"\"\n     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n \n-@app.route('/\n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n \n+if __name__ == '__main__':\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n \n \n+\n # from flask import Flask, request, jsonify, send_from_directory\n # from flask_cors import CORS\n # import os\n # from werkzeug.utils import secure_filename\n"
                },
                {
                    "date": 1754944528008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,292 +1,53 @@\n-from flask import Flask, request, jsonify, send_from_directory, render_template\n+from flask import Flask, request, jsonify, send_from_directory\n from flask_cors import CORS\n import os\n-from werkzeug.utils import secure_filename\n from datetime import datetime\n-import uuid\n \n-# === CONFIG ===\n-UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+app = Flask(__name__)\n+CORS(app)\n \n-app = Flask(__name__, template_folder='templates', static_folder='static')\n-CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n+UPLOAD_FOLDER = 'uploads'\n app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-def allowed_file(filename):\n-    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+# Fake in-memory database\n+videos_data = []\n \n-# === Frontend route ===\n-@app.route('/')\n-def index():\n-    return render_template('index.html')\n-\n-# --- Upload video ---\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n-        return jsonify({'error': 'No video file found in request'}), 400\n+        return jsonify({\"error\": \"No video file provided\"}), 400\n \n     file = request.files['video']\n     if file.filename == '':\n-        return jsonify({'error': 'No selected file'}), 400\n+        return jsonify({\"error\": \"No selected file\"}), 400\n \n-    if file and allowed_file(file.filename):\n-        original_filename = secure_filename(file.filename)\n-        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-        file.save(save_path)\n+    # Save file\n+    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n+    file.save(filepath)\n \n-        return jsonify({\n-            'message': 'File uploaded successfully',\n-            'filename': unique_filename,\n-            'url': f\"/uploads/{unique_filename}\"\n-        }), 201\n+    # Add to in-memory database\n+    videos_data.append({\n+        \"title\": file.filename,\n+        \"url\": f\"/uploads/{file.filename}\",\n+        \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n+        \"views\": 0,\n+        \"likes\": 0\n+    })\n \n-    return jsonify({'error': 'Invalid file type'}), 400\n+    return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n \n-# --- List videos ---\n+\n @app.route('/videos', methods=['GET'])\n-def list_videos():\n-    files = sorted(\n-        os.listdir(app.config['UPLOAD_FOLDER']),\n-        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-        reverse=True\n-    )\n-    return jsonify(files)\n+def get_videos():\n+    \"\"\"Return just filenames for the home page.\"\"\"\n+    return jsonify([v[\"title\"] for v in videos_data])\n \n-# --- Serve uploaded video ---\n-@app.route('/uploads/<path:filename>', methods=['GET'])\n+\n+@app.route('/uploads/<path:filename>')\n def serve_video(filename):\n+    \"\"\"Serve uploaded video files.\"\"\"\n     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n \n-# --- Delete video ---\n-@app.route('/delete-video/<filename>', methods=['DELETE'])\n-def delete_video(filename):\n-    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-    if not os.path.exists(path):\n-        return jsonify({'error': 'File not found'}), 404\n \n-    os.remove(path)\n-    return jsonify({'message': f'{filename} deleted successfully'})\n-\n-if __name__ == '__main__':\n-    app.run(host='0.0.0.0', port=5000, debug=True)\n-\n-\n-\n-# from flask import Flask, request, jsonify, send_from_directory\n-# from flask_cors import CORS\n-# import os\n-# from werkzeug.utils import secure_filename\n-# from datetime import datetime\n-# import uuid\n-\n-# # === CONFIG ===\n-# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-# app = Flask(__name__)\n-# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n-\n-# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-# def allowed_file(filename):\n-#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-# # --- Upload video ---\n-# @app.route('/upload', methods=['POST'])\n-# def upload_video():\n-#     if 'video' not in request.files:\n-#         return jsonify({'error': 'No video file found in request'}), 400\n-\n-#     file = request.files['video']\n-#     if file.filename == '':\n-#         return jsonify({'error': 'No selected file'}), 400\n-\n-#     if file and allowed_file(file.filename):\n-#         original_filename = secure_filename(file.filename)\n-#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-#         file.save(save_path)\n-\n-#         return jsonify({\n-#             'message': 'File uploaded successfully',\n-#             'filename': unique_filename,\n-#             'url': f\"/uploads/{unique_filename}\"\n-#         }), 201\n-\n-#     return jsonify({'error': 'Invalid file type'}), 400\n-\n-# # --- List videos ---\n-# @app.route('/videos', methods=['GET'])\n-# def list_videos():\n-#     files = sorted(\n-#         os.listdir(app.config['UPLOAD_FOLDER']),\n-#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-#         reverse=True\n-#     )\n-#     return jsonify(files)\n-\n-# # --- Serve uploaded video ---\n-# @app.route('/uploads/<path:filename>', methods=['GET'])\n-# def serve_video(filename):\n-#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-# # --- Get video info ---\n-# @app.route('/video-info/<filename>', methods=['GET'])\n-# def video_info(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     stat = os.stat(path)\n-#     return jsonify({\n-#         'name': filename,\n-#         'size_kb': round(stat.st_size / 1024, 2),\n-#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-#     })\n-\n-# # --- Delete video ---\n-# @app.route('/delete-video/<filename>', methods=['DELETE'])\n-# def delete_video(filename):\n-#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-#     if not os.path.exists(path):\n-#         return jsonify({'error': 'File not found'}), 404\n-\n-#     os.remove(path)\n-#     return jsonify({'message': f'{filename} deleted successfully'})\n-\n-# # --- Dashboard API ---\n-# @app.route('/dashboard', methods=['GET'])\n-# def dashboard():\n-#     files = sorted(\n-#         os.listdir(app.config['UPLOAD_FOLDER']),\n-#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-#         reverse=True\n-#     )\n-\n-#     total_videos = len(files)\n-#     total_likes = total_videos * 10  # Dummy like count (replace with DB)\n-#     total_views = total_videos * 120  # Dummy views count (replace with DB)\n-\n-#     recent_activity = []\n-#     for f in files[:5]:\n-#         stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n-#         recent_activity.append({\n-#             \"type\": \"upload\",\n-#             \"title\": f,\n-#             \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n-#             \"url\": f\"/uploads/{f}\"\n-#         })\n-\n-#     return jsonify({\n-#         \"totalVideos\": total_videos,\n-#         \"totalViews\": total_views,\n-#         \"totalLikes\": total_likes,\n-#         \"recentActivity\": recent_activity\n-#     })\n-\n-# if __name__ == '__main__':\n-#     app.run(host='0.0.0.0', port=5000, debug=True)\n-\n-# # from flask import Flask, request, jsonify, send_from_directory\n-# # from flask_cors import CORS\n-# # import os\n-# # from werkzeug.utils import secure_filename\n-# # from datetime import datetime\n-# # import uuid\n-\n-# # # === CONFIG ===\n-# # UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n-# # ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n-# # MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n-\n-# # app = Flask(__name__)\n-# # CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n-\n-# # app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n-# # app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n-\n-# # # Ensure uploads folder exists\n-# # os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n-\n-\n-# # def allowed_file(filename):\n-# #     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n-\n-\n-# # @app.route('/upload', methods=['POST'])\n-# # def upload_video():\n-# #     if 'video' not in request.files:\n-# #         return jsonify({'error': 'No video file found in request'}), 400\n-\n-# #     file = request.files['video']\n-# #     if file.filename == '':\n-# #         return jsonify({'error': 'No selected file'}), 400\n-\n-# #     if file and allowed_file(file.filename):\n-# #         original_filename = secure_filename(file.filename)\n-# #         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n-# #         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n-# #         file.save(save_path)\n-\n-# #         return jsonify({\n-# #             'message': 'File uploaded successfully',\n-# #             'filename': unique_filename,\n-# #             'url': f\"/uploads/{unique_filename}\"\n-# #         }), 201\n-\n-# #     return jsonify({'error': 'Invalid file type'}), 400\n-\n-\n-# # @app.route('/videos', methods=['GET'])\n-# # def list_videos():\n-# #     files = sorted(\n-# #         os.listdir(app.config['UPLOAD_FOLDER']),\n-# #         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n-# #         reverse=True\n-# #     )\n-# #     return jsonify(files)\n-\n-\n-# # @app.route('/uploads/<path:filename>', methods=['GET'])\n-# # def serve_video(filename):\n-# #     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n-\n-\n-# # @app.route('/video-info/<filename>', methods=['GET'])\n-# # def video_info(filename):\n-# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-# #     if not os.path.exists(path):\n-# #         return jsonify({'error': 'File not found'}), 404\n-\n-# #     stat = os.stat(path)\n-# #     return jsonify({\n-# #         'name': filename,\n-# #         'size_kb': round(stat.st_size / 1024, 2),\n-# #         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n-# #     })\n-\n-\n-# # @app.route('/delete-video/<filename>', methods=['DELETE'])\n-# # def delete_video(filename):\n-# #     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n-# #     if not os.path.exists(path):\n-# #         return jsonify({'error': 'File not found'}), 404\n-\n-# #     os.remove(path)\n-# #     return jsonify({'message': f'{filename} deleted successfully'})\n-\n-\n-# # if __name__ == '__main__':\n-# #     app.run(host='0.0.0.0', port=5000, debug=True)\n+@app.route('/\n"
                },
                {
                    "date": 1754944936668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,16 @@\n app = Flask(__name__)\n CORS(app)\n \n UPLOAD_FOLDER = 'uploads'\n-app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n \n-# Fake in-memory database\n+# In-memory \"database\"\n videos_data = []\n \n+# -----------------------\n+# UPLOAD VIDEO\n+# -----------------------\n @app.route('/upload', methods=['POST'])\n def upload_video():\n     if 'video' not in request.files:\n         return jsonify({\"error\": \"No video file provided\"}), 400\n@@ -21,13 +23,11 @@\n     file = request.files['video']\n     if file.filename == '':\n         return jsonify({\"error\": \"No selected file\"}), 400\n \n-    # Save file\n-    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n+    filepath = os.path.join(UPLOAD_FOLDER, file.filename)\n     file.save(filepath)\n \n-    # Add to in-memory database\n     videos_data.append({\n         \"title\": file.filename,\n         \"url\": f\"/uploads/{file.filename}\",\n         \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n@@ -36,18 +36,39 @@\n     })\n \n     return jsonify({\"message\": \"Video uploaded successfully\"}), 200\n \n-\n+# -----------------------\n+# GET ALL VIDEOS (Home)\n+# -----------------------\n @app.route('/videos', methods=['GET'])\n def get_videos():\n-    \"\"\"Return just filenames for the home page.\"\"\"\n     return jsonify([v[\"title\"] for v in videos_data])\n \n-\n+# -----------------------\n+# SERVE VIDEO FILES\n+# -----------------------\n @app.route('/uploads/<path:filename>')\n def serve_video(filename):\n-    \"\"\"Serve uploaded video files.\"\"\"\n-    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+    return send_from_directory(UPLOAD_FOLDER, filename)\n \n+# -----------------------\n+# DASHBOARD DATA\n+# -----------------------\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    total_videos = len(videos_data)\n+    total_views = sum(v[\"views\"] for v in videos_data)\n+    total_likes = sum(v[\"likes\"] for v in videos_data)\n \n-@app.route('/\n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": videos_data[-5:]  # last 5 uploads\n+    })\n+\n+# -----------------------\n+# RUN SERVER\n+# -----------------------\n+if __name__ == '__main__':\n+    app.run(port=5000, debug=True)\n"
                },
                {
                    "date": 1754944981887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+from flask import Flask, request, jsonify, send_from_directory\n+from flask_cors import CORS\n+import os\n+from werkzeug.utils import secure_filename\n+from datetime import datetime\n+import uuid\n+\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+app = Flask(__name__)\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# --- Upload video ---\n+@app.route('/upload', methods=['POST'])\n+def upload_video():\n+    if 'video' not in request.files:\n+        return jsonify({'error': 'No video file found in request'}), 400\n+\n+    file = request.files['video']\n+    if file.filename == '':\n+        return jsonify({'error': 'No selected file'}), 400\n+\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n+\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n+\n+    return jsonify({'error': 'Invalid file type'}), 400\n+\n+# --- List videos ---\n+@app.route('/videos', methods=['GET'])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n+\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n+def serve_video(filename):\n+    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# --- Get video info ---\n+@app.route('/video-info/<filename>', methods=['GET'])\n+def video_info(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    stat = os.stat(path)\n+    return jsonify({\n+        'name': filename,\n+        'size_kb': round(stat.st_size / 1024, 2),\n+        'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+    })\n+\n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n+\n+# --- Dashboard API ---\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+\n+    total_videos = len(files)\n+    total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+    total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+    recent_activity = []\n+    for f in files[:5]:\n+        stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+        recent_activity.append({\n+            \"type\": \"upload\",\n+            \"title\": f,\n+            \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+            \"url\": f\"/uploads/{f}\"\n+        })\n+\n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": recent_activity\n+    })\n+\n+if __name__ == '__main__':\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n+\n+# from flask import Flask, request, jsonify, send_from_directory\n+# from flask_cors import CORS\n+# import os\n+# from werkzeug.utils import secure_filename\n+# from datetime import datetime\n+# import uuid\n+\n+# # === CONFIG ===\n+# UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+# ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+# MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+# app = Flask(__name__)\n+# CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n+\n+# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+# app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+# # Ensure uploads folder exists\n+# os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+\n+# def allowed_file(filename):\n+#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+\n+# @app.route('/upload', methods=['POST'])\n+# def upload_video():\n+#     if 'video' not in request.files:\n+#         return jsonify({'error': 'No video file found in request'}), 400\n+\n+#     file = request.files['video']\n+#     if file.filename == '':\n+#         return jsonify({'error': 'No selected file'}), 400\n+\n+#     if file and allowed_file(file.filename):\n+#         original_filename = secure_filename(file.filename)\n+#         unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+#         save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+#         file.save(save_path)\n+\n+#         return jsonify({\n+#             'message': 'File uploaded successfully',\n+#             'filename': unique_filename,\n+#             'url': f\"/uploads/{unique_filename}\"\n+#         }), 201\n+\n+#     return jsonify({'error': 'Invalid file type'}), 400\n+\n+\n+# @app.route('/videos', methods=['GET'])\n+# def list_videos():\n+#     files = sorted(\n+#         os.listdir(app.config['UPLOAD_FOLDER']),\n+#         key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+#         reverse=True\n+#     )\n+#     return jsonify(files)\n+\n+\n+# @app.route('/uploads/<path:filename>', methods=['GET'])\n+# def serve_video(filename):\n+#     return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+\n+# @app.route('/video-info/<filename>', methods=['GET'])\n+# def video_info(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     stat = os.stat(path)\n+#     return jsonify({\n+#         'name': filename,\n+#         'size_kb': round(stat.st_size / 1024, 2),\n+#         'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+#     })\n+\n+\n+# @app.route('/delete-video/<filename>', methods=['DELETE'])\n+# def delete_video(filename):\n+#     path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+#     if not os.path.exists(path):\n+#         return jsonify({'error': 'File not found'}), 404\n+\n+#     os.remove(path)\n+#     return jsonify({'message': f'{filename} deleted successfully'})\n+\n+\n+# if __name__ == '__main__':\n+#     app.run(host='0.0.0.0', port=5000, debug=True)\n"
                },
                {
                    "date": 1754945042552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+from flask import Flask, request, jsonify, send_from_directory\n+from flask_cors import CORS\n+import os\n+from werkzeug.utils import secure_filename\n+from datetime import datetime\n+import uuid\n+\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+app = Flask(__name__)\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# --- Upload video ---\n+@app.route('/upload', methods=['POST'])\n+def upload_video():\n+    if 'video' not in request.files:\n+        return jsonify({'error': 'No video file found in request'}), 400\n+\n+    file = request.files['video']\n+    if file.filename == '':\n+        return jsonify({'error': 'No selected file'}), 400\n+\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n+\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n+\n+    return jsonify({'error': 'Invalid file type'}), 400\n+\n+# --- List videos ---\n+@app.route('/videos', methods=['GET'])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n+\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n+def serve_video(filename):\n+    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# --- Get video info ---\n+@app.route('/video-info/<filename>', methods=['GET'])\n+def video_info(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    stat = os.stat(path)\n+    return jsonify({\n+        'name': filename,\n+        'size_kb': round(stat.st_size / 1024, 2),\n+        'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+    })\n+\n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n+\n+# --- Dashboard API ---\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+\n+    total_videos = len(files)\n+    total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+    total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+    recent_activity = []\n+    for f in files[:5]:\n+        stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+        recent_activity.append({\n+            \"type\": \"upload\",\n+            \"title\": f,\n+            \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+            \"url\": f\"/uploads/{f}\"\n+        })\n+\n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": recent_activity\n+    })\n+\n+if __name__ == '__main__':\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754945682648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+from flask import Flask, request, jsonify, send_from_directory\n+from flask_cors import CORS\n+import os\n+from werkzeug.utils import secure_filename\n+from datetime import datetime\n+import uuid\n+\n+# === CONFIG ===\n+UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\n+ALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\n+MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n+\n+app = Flask(__name__)\n+CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n+\n+app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n+\n+os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n+\n+def allowed_file(filename):\n+    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n+\n+# --- Upload video ---\n+@app.route('/upload', methods=['POST'])\n+def upload_video():\n+    if 'video' not in request.files:\n+        return jsonify({'error': 'No video file found in request'}), 400\n+\n+    file = request.files['video']\n+    if file.filename == '':\n+        return jsonify({'error': 'No selected file'}), 400\n+\n+    if file and allowed_file(file.filename):\n+        original_filename = secure_filename(file.filename)\n+        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n+        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n+        file.save(save_path)\n+\n+        return jsonify({\n+            'message': 'File uploaded successfully',\n+            'filename': unique_filename,\n+            'url': f\"/uploads/{unique_filename}\"\n+        }), 201\n+\n+    return jsonify({'error': 'Invalid file type'}), 400\n+\n+# --- List videos ---\n+@app.route('/videos', methods=['GET'])\n+def list_videos():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+    return jsonify(files)\n+\n+# --- Serve uploaded video ---\n+@app.route('/uploads/<path:filename>', methods=['GET'])\n+def serve_video(filename):\n+    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n+\n+# --- Get video info ---\n+@app.route('/video-info/<filename>', methods=['GET'])\n+def video_info(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    stat = os.stat(path)\n+    return jsonify({\n+        'name': filename,\n+        'size_kb': round(stat.st_size / 1024, 2),\n+        'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n+    })\n+\n+# --- Delete video ---\n+@app.route('/delete-video/<filename>', methods=['DELETE'])\n+def delete_video(filename):\n+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n+    if not os.path.exists(path):\n+        return jsonify({'error': 'File not found'}), 404\n+\n+    os.remove(path)\n+    return jsonify({'message': f'{filename} deleted successfully'})\n+\n+# --- Dashboard API ---\n+@app.route('/dashboard', methods=['GET'])\n+def dashboard():\n+    files = sorted(\n+        os.listdir(app.config['UPLOAD_FOLDER']),\n+        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n+        reverse=True\n+    )\n+\n+    total_videos = len(files)\n+    total_likes = total_videos * 10  # Dummy like count (replace with DB)\n+    total_views = total_videos * 120  # Dummy views count (replace with DB)\n+\n+    recent_activity = []\n+    for f in files[:5]:\n+        stat = os.stat(os.path.join(app.config['UPLOAD_FOLDER'], f))\n+        recent_activity.append({\n+            \"type\": \"upload\",\n+            \"title\": f,\n+            \"time\": datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\"),\n+            \"url\": f\"/uploads/{f}\"\n+        })\n+\n+    return jsonify({\n+        \"totalVideos\": total_videos,\n+        \"totalViews\": total_views,\n+        \"totalLikes\": total_likes,\n+        \"recentActivity\": recent_activity\n+    })\n+\n+if __name__ == '__main__':\n+    app.run(host='0.0.0.0', port=5000, debug=True)\n"
                }
            ],
            "date": 1754856206435,
            "name": "Commit-0",
            "content": "from flask import Flask, request, jsonify, send_from_directory\nfrom flask_cors import CORS\nimport os\nfrom werkzeug.utils import secure_filename\nfrom datetime import datetime\nimport uuid\n\n# === CONFIG ===\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\nALLOWED_EXTENSIONS = {'mp4', 'mov', 'avi', 'webm'}\nMAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500MB\n\napp = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # You can replace '*' with your frontend URL\n\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n\n# Ensure uploads folder exists\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\n\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\n@app.route('/upload', methods=['POST'])\ndef upload_video():\n    if 'video' not in request.files:\n        return jsonify({'error': 'No video file found in request'}), 400\n\n    file = request.files['video']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n\n    if file and allowed_file(file.filename):\n        original_filename = secure_filename(file.filename)\n        unique_filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n        save_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n        file.save(save_path)\n\n        return jsonify({\n            'message': 'File uploaded successfully',\n            'filename': unique_filename,\n            'url': f\"/uploads/{unique_filename}\"\n        }), 201\n\n    return jsonify({'error': 'Invalid file type'}), 400\n\n\n@app.route('/videos', methods=['GET'])\ndef list_videos():\n    files = sorted(\n        os.listdir(app.config['UPLOAD_FOLDER']),\n        key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)),\n        reverse=True\n    )\n    return jsonify(files)\n\n\n@app.route('/uploads/<path:filename>', methods=['GET'])\ndef serve_video(filename):\n    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n\n\n@app.route('/video-info/<filename>', methods=['GET'])\ndef video_info(filename):\n    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n    if not os.path.exists(path):\n        return jsonify({'error': 'File not found'}), 404\n\n    stat = os.stat(path)\n    return jsonify({\n        'name': filename,\n        'size_kb': round(stat.st_size / 1024, 2),\n        'upload_time': datetime.fromtimestamp(stat.st_mtime).strftime(\"%Y-%m-%d %H:%M:%S\")\n    })\n\n\n@app.route('/delete-video/<filename>', methods=['DELETE'])\ndef delete_video(filename):\n    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n    if not os.path.exists(path):\n        return jsonify({'error': 'File not found'}), 404\n\n    os.remove(path)\n    return jsonify({'message': f'{filename} deleted successfully'})\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n"
        }
    ]
}